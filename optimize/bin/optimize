#!/usr/bin/env python3
import sys, os, argparse, random
import numpy as np
sys.path.append(os.path.abspath('.'))
from src.optimization import optimize

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('-i', '--state', required=True, type=str, help='Path to a state file.')
    parser.add_argument('-o', '--out', required=True)
    parser.add_argument('-s', '--seed', required=False, type=int, default=1)
    parser.add_argument('-fi', '--feasinfeas', action='store_true', 
                        help='Do 2 pop optimziation. If novelty metric is present will do novelty in infeas pop.')
    parser.add_argument('-fi2N', '--feasinfeas_2N', action='store_true',
                        help='Do 2 pop optimziation. Will use do novelty in both populations. Automatically sets --novelty true.')
    parser.add_argument('-mst', '--max_start_tiles', type=int, default=200, required=False)
    parser.add_argument('-d', '--n_districts', type=int, default=8, required=False)
    parser.add_argument('-g', '--n_gens', type=int, default=500, required=False, help='The total number of generations across all phases.')
    # parser.add_argument('-gf', '--n_gens_first', type=int, default=None, required=False)
    # parser.add_argument('-gl', '--n_gens_last', type=int, default=None, required=False)
    parser.add_argument('-p', '--pop_size', type=int, default=600, required=False)
    parser.add_argument('-m', '--metrics', nargs='+', required=True)
    parser.add_argument('-e', '--equality_constraint', default=.05, type=float)
    parser.add_argument('-nov', '--novelty', action='store_true', help='Use novelty search.')
    parser.add_argument('--NSGA3', action='store_true')
    parser.add_argument('--dont_fix_seeds', action='store_true')
    args = parser.parse_args()
    optimize(args)
